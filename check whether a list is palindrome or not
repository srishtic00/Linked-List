struct ListNode* reverse(struct ListNode* head)
{
   struct ListNode* curr=head;
    if(curr==NULL || curr->next==NULL)
    {
        return curr;
    }
    struct ListNode* rest=reverse(curr->next);
    curr->next->next=curr;
    curr->next=NULL;
    return rest;
}
bool isPalindrome(struct ListNode* head){
    if(!head || !head->next)
        return true;
    if(head->next->next==NULL)
    {
        if(head->val==head->next->val)
            return true;
        else
            return false;
    }
 struct ListNode * slow=head;
       struct ListNode* fast=head;
        while(fast && fast->next)
        {
            slow=slow->next;
            fast=fast->next->next;
        }
   struct ListNode* node=(struct ListNode*)malloc(sizeof(struct ListNode));
        node=reverse(slow);
    printf("%d %d",node->val,node->next->val);
       struct ListNode* curr=head;
        while(curr && node)
        {
            if(curr->val!=node->val)
                return false;
            curr=curr->next;
            node=node->next;
        }
        return true;
}
